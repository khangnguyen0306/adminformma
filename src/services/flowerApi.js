import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";
import { BE_API_LOCAL } from "../config";
import { selectTokens } from "../slices/auth.slice";

// Define a service using a base URL and expected endpoints
export const flowerApi = createApi({
  reducerPath: "flowerManagement",
  // Tag types are used for caching and invalidation.
  tagTypes: ["FlowerList"],
  baseQuery: fetchBaseQuery({
    baseUrl: BE_API_LOCAL,

    prepareHeaders: (headers, { getState }) => {
      const token = selectTokens(getState()); 
      if (token) {
        headers.append("Authorization", `Bearer ${token}`);
      }
    
      return headers;
    },

}),
  endpoints: (builder) => ({

    getAllFlowers: builder.query({
      query: () => `flowers`,
      // `providesTags` determines which 'tag' is attached to the
      // cached data returned by the query.
      providesTags: (result, _error, _arg) =>
        result
          ? [
              ...result.map(({ id }) => ({ type: "flower", id })),
              { type: "flower", id: "LIST" },
            ]
          : [{ type: "flower", id: "LIST" }],
    }),
    getFlowesDetails: builder.query({
      query: (flowerId) => ({
          url: `flowers/${flowerId}`,
          method: "GET",
      }),
  }),

    createflower: builder.mutation({
      query: (body) => {
        return {
          method: "POST",
          url: `flowers`,
          body,
        };
      },
      invalidatesTags: [{ type: "flower", id: "LIST" }],
    }),

    editFlower: builder.mutation({
      query: (payload) => {
        return {
          method: "PUT",
          url: `flowers/` + payload.id,
          body: payload.body,
        };
      },
      invalidatesTags: (res, err, arg) => [{ type: "flower", id: arg.id }],
    }),
    deleteFlower: builder.mutation({
      query: (payload) => {
        return {
          method: "DELETE",
          url: `flowers/` + payload,
        };
      },
      invalidatesTags: (_res, _err, _arg) => [
        { type: "flower", id: "LIST" },
      ],
    }),
  }),
});

// Export hooks for usage in functional components, which are
// auto-generated based on the defined endpoints
// Hooks are auto-generated by RTK-Query
export const {
  useGetAllFlowersQuery,
  useGetFlowesDetailsQuery,
  useCreateflowerMutation,
  useEditFlowerMutation,
  useDeleteFlowerMutation,
} = flowerApi;
