import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";
import { BE_API_LOCAL } from "../config";
import { selectTokens } from "../slices/auth.slice";

// Define a service using a base URL and expected endpoints
export const orderAPI = createApi({
    reducerPath: "odderManagement",
    // Tag types are used for caching and invalidation.
    tagTypes: ["OrderList"],
    baseQuery: fetchBaseQuery({
        baseUrl: BE_API_LOCAL,

        prepareHeaders: (headers, { getState }) => {
            const token = selectTokens(getState());
            if (token) {
                headers.append("Authorization", `Bearer ${token}`);
            }

            return headers;
        },

    }),
    endpoints: (builder) => ({
        // Supply generics for the return type (in this case `orderAPIResponse`)
        // and the expected query argument. If there is no argument, use `void`
        // for the argument type instead.
        getAllOrders: builder.query({
            query: () => `orders`,
            // `providesTags` determines which 'tag' is attached to the
            // cached data returned by the query.
            providesTags: (result, _error, _arg) =>
                result
                    ? [
                        ...result.map(({ id }) => ({ type: "order", id })),
                        { type: "order", id: "LIST" },
                    ]
                    : [{ type: "order", id: "LIST" }],
        }),
        getOrderDetails: builder.query({
            query: (orderId) => ({
                url: `orders/${orderId}`,
                method: "GET",
            }),
        }),

        createOrder: builder.mutation({
            query: (body) => {
                return {
                    method: "POST",
                    url: `orders`,
                    body,
                };
            },
            invalidatesTags: [{ type: "order", id: "LIST" }],
        }),

        editOrder: builder.mutation({
            query: (payload) => {
                return {
                    method: "PUT",
                    url: `orders/` + payload.id,
                    body: payload.body,
                };
            },
            invalidatesTags: (res, err, arg) => [{ type: "order", id: arg.id }],
        }),
        deleteOrder: builder.mutation({
            query: (payload) => {
                return {
                    method: "DELETE",
                    url: `orders/` + payload,
                };
            },
            invalidatesTags: (_res, _err, _arg) => [
                { type: "order", id: "LIST" },
            ],
        }),
    }),
});

// Export hooks for usage in functional components, which are
// auto-generated based on the defined endpoints
// Hooks are auto-generated by RTK-Query
export const {
    useGetAllOrdersQuery,
    useGetOrderDetailsQuery,
    useCreateOrderMutation,
    useEditOrderMutation,
    useDeleteOrderMutation,
} = orderAPI;
